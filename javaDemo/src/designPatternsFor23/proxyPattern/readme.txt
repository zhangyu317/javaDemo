代理模式：
	代理模式指给一个对象提供一个代理对象，并由代理对象控制对原对象的引用。代理可以分为静态代理和动态代理。 
	通过代理模式，可以利用代理对象为被代理对象添加额外的功能，以此来拓展被代理对象的功能。
	可以用于计算某个方法执行时间，在某个方法执行前后记录日志等操作。
1. 静态代理
	静态代理需要我们写出代理类和被代理类，而且一个代理类和一个被代理类一一对应。
	代理类和被代理类需要实现同一个接口，通过聚合使得代理对象中有被代理对象的引用，以此实现代理对象控制被代理对象的目的
2. 动态代理
	JDK 1.3 之后，Java通过java.lang.reflect包中的三个类Proxy、InvocationHandler、Method来支持动态代理。
	动态代理常用于有若干个被代理的对象，且为每个被代理对象添加的功能是相同的（例如在每个方法运行前后记录日志）。
	
	动态代理的代理类不需要我们编写，由Java自动产生代理类源代码并进行编译最后生成代理对象。 
	创建动态代理对象的步骤： 
	1. 指明一系列的接口来创建一个代理对象 
	2. 创建一个调用处理器（InvocationHandler）对象 
	3. 将这个代理指定为某个其他对象的代理对象 
	4. 在调用处理器的invoke（）方法中采取代理，一方面将调用传递给真实对象，另一方面执行各种需要的操作
